#library "CBM_SPECIFIC"

#include "zcommon.acs"
#include "8bdmlib.acs"

#define TEAM_NONE -1

#DEFINE C_DIVELOCKDISPLAY 4407

//Precursor to ACS cleanup/organization

script "cbm_IsTeamServerMAX_S" OPEN
{
IsTeamGame = ACS_ExecuteWithResult(975,1);
ServerMAX = GetMaxPlayers();
}

//  _____                           _
// |  __ \                         | |
// | |  \/ ___ _ __   ___ _ __ __ _| |
// | | __ / _ \ '_ \ / _ \ '__/ _` | |
// | |_\ \  __/ | | |  __/ | | (_| | |
//  \____/\___|_| |_|\___|_|  \__,_|_|

script "cbm_countinv_acs" (int Which, int Pointer)
{
	if(Pointer>0){
		SetActivator(0,Pointer);
	}
	int Counter = 0;
	switch(Which)
	{
		Default:
			break;
		Case 27:
			Counter = CheckInventory("IncredibleAmmo");
			break;
		Case 31:
			Counter = CheckInventory("PullCharge");
			break;
		Case 57:
			Counter = CheckInventory("CrystalEyeCharge");
			break;
		Case 92:
			Counter = CheckInventory("CrabHealingAmmo");
			break;
		Case 103:
			Counter = CheckInventory("ChillHealthFlag");
			break;
		Case 204:
			Counter = CheckInventory("JoeGrenadeCharge");
			break;
		Case 302:
			Counter = CheckInventory("BalladeFocusFlag");
			break;
		Case 306:
			Counter = CheckInventory("HSHDashPower");
			break;
		Case 503:
			Counter = CheckInventory("MarsSpreadFlag");
			break;
	}
	SetResultValue(Counter);
}

script "cbm_FloorQuakeDamage" (int maxRange, int QuakePower, int Which)
{
	int userTID = ActivatorTID();
	int userTeam = ACS_ExecuteWithResult(143,0);
	int zDist;
	str TheClass;
	Switch(Which){
//MMB is 800
//WT is 300
//MMK is 400
		Case 557:
			TheClass = "Neptune";
			break;
		Case 90:
			TheClass = "Concreteman";
			break;
		Case 66:
			TheClass = "Windman";
			break;
		Case 1052:
			TheClass = "Stoneman2";
			break;
		Case 52:
			TheClass = "Stoneman";
			break;
		Case 33:
			TheClass = "Hardman";
			break;
	}
	str SpawnName = StrParam(s:TheClass,s:"_FloorQuakeSpawn");
	//Log(s:"maxRange = ",i:maxRange,s:" \\ QuakePower = ",i:QuakePower);
	for(int p = 0;p < ServerMAX; p++)
	{
		if(!PlayerInGame(p))
		{
			continue;
		}
		if(IsTeamGame)
		{
			if(userTeam == GetPlayerInfo(p, PLAYERINFO_TEAM))
			{
				continue;
			}
		}
		if(xyDistance(0, p+1000) < maxRange && zDistance(0, p+1000) >= -32 && zDistance(0, p+1000) <= 32 && userTID != p+1000)
		{
			//Log(s:"xyDist = ",i:xyDistance(0, p+1000),s:" \\ zDist = ",i:zDistance(0, p+1000));
			//SpawnForced(SpawnName,GetActorX(p+1000),GetActorY(p+1000),GetActorZ(p+1000),0,QuakePower);
			SpawnProjectile(userTID,SpawnName,QuakePower,0,p,0,0);
		}
	}
}

script "cbm_GiveIfPlayerHitMe" (int mode, int O_TID, int H_TID)
{
switch (mode) {
	case 3://Mercury
	case 2://King
	case 1://Skull
		//log(s:"Hitter TID = ",i:H_TID);
		//log(s:"Owner TID = ",i:O_TID);
		if(H_TID == 0){
			break;
		}
		if(H_TID != O_TID && ClassifyActor(H_TID) & ACTOR_PLAYER){
			int O_TID_Team = ACS_ExecuteWithResult(143,O_TID,1);
			int H_TID_Team = ACS_ExecuteWithResult(143,H_TID,1);
			//log(s:"Hitter Team = ",i:H_TID_Team);
			//log(s:"Owner Team = ",i:O_TID_Team);
			if(H_TID_Team == TEAM_NONE || H_TID_Team != O_TID_Team){
				switch (mode) {
						default:
							break;
						case 1://Skull
							GiveActorInventory(O_TID,"SkullM_CounterTime_P",1);
							//log(s:"Gave SkullCounter");
							break;
						case 2://King
							GiveActorInventory(O_TID,"TheKingShieldCounter",1);
							//log(s:"Gave KingCounter");
							break;
						case 3://Mercury
							GiveActorInventory(O_TID,"MercurySnatchPickup",1);
							//log(s:"Gave MercurySnatch");
							break;
				}
			}
		}
		break;
	default:
		break;
}
}

Script "cbm_ETankHeal" (int HealAmount, int ScaledHealth)
{
int Ratio;
int MaxHealth = GetActorProperty(0,APROP_SPAWNHEALTH);
if(MaxHealth==0){MaxHealth=100;}

if(ScaledHealth==0 || GetCVAR("YD_NoHealingScale")){Ratio = 1;}
else{Ratio = MaxHealth/100;}
int TrueAmount = (HealAmount * Ratio);

if(ACS_ExecuteWithResult(975,0)!=2 && ACS_ExecuteWithResult(975,2)!=2)
{
HealThing(TrueAmount,MaxHealth); 
terminate;
}

while(TrueAmount > 0 && GetActorProperty(0,APROP_Health)<MaxHealth && GetActorProperty(0,APROP_Health)>0 && PlayerInGame(PlayerNumber()))
    {
	PlaySound(0,"item/mm4heal",CHAN_ITEM,0.5);
	HealThing(1,MaxHealth);
	TrueAmount -= 1;
	Delay(5);
    }
}


//   ___
//  / _ \
// | | | |
// | | | |
// | |_| |
//  \___/ 

script "cbm_bbabfg" (int maxRange)
{
	if(maxRange == 0){terminate;}

	int userTID;
	int userTeam = -1;

	if(ActivatorTID() == 0)
	{
		userTID = ACS_ExecuteWithResult(257,0);
		userTeam = ACS_ExecuteWithResult(143,0);
	}
	else
	{
		userTID = ActivatorTID();
	}
	str SpawnName = StrParam(s:"BBA_BFGTracerSpawner_",i:userTeam);
	for(int p = 0;p < ServerMAX; p++)
	{
		if(!PlayerInGame(p))
		{
			continue;
		}
		if(IsTeamGame)
		{
			if(userTeam == GetPlayerInfo(p, PLAYERINFO_TEAM))
			{
				continue;
			}
		}

		if(xyzDistance(0, p+1000) < maxRange && userTID != p+1000)//&& !CheckActorInventory(p+1000, "IsDead")){
		{
			SetActorAngle(0, p);
			GiveInventory(SpawnName,1);
			//Spawn("BBA_BFGTracer", GetActorX(0), GetActorY(0), GetActorZ(0), 0, p);
		}

	}
}


//  __
// /_ |
//  | |
//  | |
//  | |
//  |_|

//  ___
// |__ \
//    ) |
//   / /
//  / /_
// |____|

//  ____
// |___ \
//   __) |
//  |__ <
//  ___) |
// |____/

script "cbm_DocDistSpeedReturn" (int MainNum, int TID)
{
	//int PreventZero = xyzDistance(0,TID)/MainNum;
	//Log(s:"cbm_DocDistSpeedReturn = ",i:MainNum,s:" [][] xyzDistance = ",i:xyzDistance(0,TID),s:" [][] PreventZero = ",i:PreventZero);
	SetResultValue(xyzDistance(0,TID)/MainNum);
}

//  _  _
// | || |
// | || |_
// |__   _|
//    | |
//    |_|

Script "cbm_BrightBlindFade" (int Power, int Dur, int Toggle) CLIENTSIDE
{
	int RC;
	int BC;
	int GC;
	Switch(Toggle)
	{
		Case 3:
			RC = 225;
			BC = 225;
			GC = 225;
			break;
		Case 2:
			RC = 45;
			BC = 45;
			GC = 45;
			break;
		Case 1:
			RC = 150;
			BC = 150;
			GC = 150;
			break;
		Case 0:
			RC = random(0,255);
			BC = random(0,255);
			GC = random(0,255);
			break;
	}

	CancelFade();
	FadeRange(RC,BC,GC,((1.0)*Power)/100,RC,BC,GC,0.0,((1.0)*Dur)/100);
}

script C_DIVELOCKDISPLAY (void)// CLIENTSIDE
{
	int TID = CheckInventory("SuplexID")+999;
	while(CheckInventory("SuplexID")>0)
	{
		hudmessageonactor(TID,PlayerNumber()+4000,640,480,0,-24,9028,"DIVLOCK","",0.1,CR_UNTRANSLATED,0);
		Delay(1);
	}
}

script "cbm_divesonarrender" (int targetTID)
{
	if(CheckActorInventory(targetTID, "PowerDiveSonarLockon")>0){terminate;}
	
	GiveActorInventory(targetTID, "PowerDiveSonarLockonG", 1);

	while(CheckActorInventory(targetTID, "PowerDiveSonarLockon")>0){
	Delay(1);
	hudmessageonactor(targetTID,PlayerNumber()+4000 + (targetTID -1000),640,480,0,-24,9028,"DIVLOCK","",0.1,CR_UNTRANSLATED,0);
	}
}

script "cbm_divesonardetect" (int maxRange)
{
	int targetTID;
	int distance;
	int userTID;
	int userTeam = -1;

	if(ActivatorTID() == 0){
		userTID = ACS_ExecuteWithResult(257, 0);
		userTeam = GetPlayerInfo(userTID - 1000, PLAYERINFO_TEAM);
	}
	else{
		userTID = ActivatorTID();
	}

	for(int p = 0;p < ServerMax; p++){
		if(!PlayerInGame(p)){
			continue;
		}
		if(IsTeamGame){
			if(userTeam == GetPlayerInfo(p, PLAYERINFO_TEAM)){
				continue;
			}
		}
		targetTID = p+1000;
		if(xyzDistance(0, targetTID) < maxRange && userTID != targetTID && !CheckActorInventory(targetTID, "IsDead")){
			SetActivator(userTID);
			ACS_NamedExecuteAlways("cbm_divesonarrender",0,targetTID);
		}
	}
}


//  _____
// | ____|
// | |__ 
// |___ \
//  ___) |
// |____/


//A note for the next two scripts, these are from the following file "lod-addon1.2pk3"
//It was used for the hookshot weapon for WitchHunter
// By IjonTichy, modified by Ivan, modified for this mod (CBM) by Celebi

Script "cbm_WaveHookshot" (int PlayerID, int Vel, int Moving)
{
	int myx, myy, myz;
	int vx, vy, vz, magnitude, nx, ny, nz;
	int Letgo = false;

	myx = GetActorX(0);
	myy = GetActorY(0);
	myz = GetActorZ(0);

	while(!Letgo)
	{
		if(Moving > 0){//If the hook is set to move, the positions need to be updated.
			myx = GetActorX(0);
			myy = GetActorY(0);
			myz = GetActorZ(0);
		}
		vx = myx - GetActorX(PlayerID);
		vy = myy - GetActorY(PlayerID);
		vz = myz - GetActorZ(PlayerID);

        magnitude = magnitudeThree(vx >> 16, vy >> 16, vz >> 16);

        if(magnitude != 0) {
            nx = vx / magnitude; ny = vy / magnitude; nz = vz / magnitude;
        }
        else {
            nx = 0; ny = 0; nz = 0;
        }

		//if(xyDistance(PlayerID, 0)>1500){Letgo = true;}
		Thing_Stop(0);
		SetActorVelocity(PlayerID, nx*Vel, ny*Vel, nz*Vel, true, true);
		TakeActorInventory(PlayerID,"HookshotStamina",2);

		Delay(1);
        if(CheckActorInventory(PlayerID,"WaveHookKillFlag") || CheckActorInventory(PlayerID,"IsDead")) {Letgo = True;}
		else if(CheckActorInventory(PlayerID,"HookshotStamina") < 1|| CheckActorInventory(PlayerID,"FlightDisableFlag")) {
			ActivatorSound("S3_K/MetalSpark", 127);
			Letgo = True;
		}
	}
	Delay(1);

	TakeActorInventory(PlayerID,"WaveHookWasFired",9);
	GiveActorInventory(PlayerID,"WaveHookNeedLand",1);
	GiveActorInventory(PlayerID,"WaveHookKillFlag",1);
}

//This spawns the sprite
Script "cbm_WaveHookshotFX" (int playerTid, int P_team) CLIENTSIDE
{
    int plX; int plY;  int plZ;
    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
	int density = 18;
	str SpawnName = StrParam(s:"HookshotFX",i:P_team);

	while((ClassifyActor(0) == 128||ClassifyActor(0) == 256) && CheckFlag(0,"NOGRAVITY") == true && GetActorProperty(playerTid, APROP_HEALTH)>0){

		plX = GetActorX(playerTid); grX = GetActorX(0);
		plY = GetActorY(playerTid); grY  = GetActorY(0);
		plZ = GetActorZ(playerTid)+(28 << 16); grZ  = GetActorZ(0);
		//+28 to the spawn height of ^the player so the chain doesn't spawn from their feet.
		vX = grX - plX;   vY = grY - plY;   vZ = grZ - plZ;

		magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);

		pointCount  = magnitude / density;
		pointOffset = magnitude - (pointCount * density);


		//if(grX == 0 && grY == 0 && grZ == 0){terminate;} 

		if (magnitude != 0)
		{
			nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

			int i; int j;
			for (i = 0; i < pointCount; i++)
			{
				j = (i * density) + pointOffset;

				bX = (nX * j) + plX;
				bY = (nY * j) + plY;
				bZ = (nZ * j) + plZ;//+(16 << 16);

				Spawn(SpawnName, bX, bY, bZ);
			}
		}
		Delay(1);
	}
}

//Chargeman
script "cbm_traingrab" (int target)
{
	SetActivatorToTarget(0);
	if(GetActorProperty(target, APROP_HEALTH)<=0 || GetActorProperty(ActivatorTID(), APROP_HEALTH)<=0 ||
	  !customgrab(target,-100,64,100000,0) ||
	  ((GetPlayerInput(target-1000, INPUT_BUTTONS) & BT_JUMP) && CheckActorInventory(target, "ChargeManJumpBuffer") == 0)){
		GiveInventory("ChargeManJumpBuffer",1);
		TakeActorInventory(target, "ChargeWildRideFlag", 1);
		TakeInventory("ChargeManLink",9999);
	}
}

function bool customgrab (int target, int xOff, int zOff, int range, int angle)
{
	bool End = false;
	//if (target==999) { return true; }
	int a = getActorAngle(0) + (angle<<8);
	int xDiff = (getActorX(0)+(100 + xOff)*cos(a)) - getActorX(target);
	int yDiff = (getActorY(0)+(100 + xOff)*sin(a)) - getActorY(target);
	int zDiff = (getActorZ(0)+(zOff<<16)) - getActorZ(target);
	
	int xDiffI = xDiff>>16;
	int yDiffI = yDiff>>16;
	int zDiffI = zDiff>>16;
	
	if (xDiffI*xDiffI+yDiffI*yDiffI+zDiffI*zDiffI < range) {
		SetActorVelocity(target, xDiff, yDiff, zDiff, 0, 0);
		End = true;
	}
	return End;
}

script "cbm_chargemanlink" (int driver, int passenger)
{
	if(passenger==0 || passenger == driver || passenger < 1000 || passenger > 1064){terminate;}
	// !IsTeamGame || 
	if((GetPlayerInput(passenger-1000, INPUT_BUTTONS) & BT_JUMP) == false){terminate;}
	if(CheckActorInventory(driver, "ChargeManLink")>0){terminate;}
	GiveActorInventory(passenger, "ChargeManJumpBuffer", 1);
	GiveActorInventory(passenger, "ChargeWildRideFlag", 1);
	GiveActorInventory(driver, "ChargeManLink", passenger);
	PlaySound(driver,"weapon/TrainRide",7,1.0,false,1.5);
	//Log(s:"driver is ", i:driver, s:" passenger is ", i:passenger);
}

script "cbm_gettrainpassenger" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(CheckInventory("ChargeManLink"));
}



//    __
//   / /
//  / /_
// | '_ \
// | (_) |
//  \___/

//  ______
// |____  |
//     / /
//    / /
//   / /
//  /_/


script "cbm_JunkCubeGive" (void)
{
int JunkTID = ACS_ExecuteWithResult(257, 0);

if(xyzDistance(0,JunkTID)<=100 && !GetActorProperty(JunkTID,"JunkCubeAmmoDelay") && GetActorProperty(JunkTID,APROP_Health)>0 && CheckActorInventory(JunkTID, "JunkShieldBoss"))
  {
  GiveActorInventory(JunkTID,"TrunkAmmo",1);
  GiveActorInventory(JunkTID,"JunkCubeAmmoDelay",1);
  }
}

//   ___
//  / _ \
// | (_) |
//  > _ <
// | (_) |
//  \___/

Script "cbm_ClownPegSwing" (int timeout)
{

	int TargetTID = ACS_ExecuteWithResult(147,0);

	If(CheckActorInventory(TargetTID,"RushJetCounter") >= 5){terminate;}

	int hookx = GetActorX(0);
	int hooky = GetActorY(0);
	int hookz = GetActorZ(0);
	int playerx = GetActorX(TargetTID);
	int playery = GetActorY(TargetTID);
	int thrust;
	int zthrust;
	int ThrustTimeOut=0;

	if(timeout > 0){ThrustTimeOut = timeout;}

	//SetActorState(0,"TargetClear",1);

	TakeActorInventory(TargetTID,"JumpCancler",1);
	TakeActorInventory(TargetTID,"ClownShockUpPeg2",1);
	GiveActorInventory(TargetTID,"ClownShockUpPeg",1);

	If(GetActorZ(TargetTID) - GetActorFloorZ(TargetTID)<8)
		{
		ThrustThingZ(TargetTID,35,0,0);
		Delay(2);
		}
	While(GetActorZ(TargetTID) >= (hookz-64.0) && ThrustTimeOut < 105)
		{
		ThrustThingZ(TargetTID,8,1,1);
		ThrustThing(VectorAngle(hookx - playerx, hooky - playery)>>8,1,1,TargetTID);
		playerx=GetActorX(TargetTID);
		playery=GetActorY(TargetTID);
		ThrustTimeOut++;
		Delay(1);
		}

	thrust = xyDistance(0,TargetTID)/10;//Clown_xyDistance(hookx, hooky, TargetTID)/10;
	zthrust = zDistance(0,TargetTID)/13;//Clown_zDistance(hookz, TargetTID)/13;
	//if(thrust < 10){thrust=10;}
	//if(thrust > 50){thrust=50;}
	//Log(s:"ThrustTimeOut = ",i:ThrustTimeOut,s:" thrust = ",i:thrust,s:" zthrust = ",i:zthrust);

	ThrustThing(VectorAngle(hookx - playerx, hooky - playery)>>8,thrust,1,TargetTID);
	ThrustThingZ(TargetTID,0,0,0);
	ThrustThingZ(TargetTID,zthrust,0,1);
	Delay(5);
	ThrustThingZ(TargetTID,10,0,1);
	Delay(2);
	ThrustThingZ(TargetTID,14,0,1);
	Delay(2);
	ThrustThingZ(TargetTID,18,0,1);
	Delay(2);
	ThrustThingZ(TargetTID,20,0,1);
	Delay(2);
	ThrustThingZ(TargetTID,22,0,1);

	TakeActorInventory(TargetTID,"ClownShockUpPeg",1);
	GiveActorInventory(TargetTID,"ClownShockUpPeg2",1);
}

function int Clown_xyDistance (int tid1_x, int tid1_y, int tid2)
{
	int x, y, d;
	x = tid1_x - GetActorX(tid2) >> 16;
	y = tid1_y - GetActorY(tid2) >> 16;
	d = sqrt8( x*x + y*y );
	return d;
}

function int Clown_zdistance (int tid1_z, int tid2)
{
	int z;
	z = tid1_z - GetActorZ(tid2) >> 16;
	return z;
}

//   ___
//  / _ \
// | (_) |
//  \__, |
//    / /
//   /_/

script "cbm_GetJewelInfo" (int gem)
{
int power;
SetActivatorToTarget(0);
if(CheckInventory("JewelSlot1")==gem){power++;}
if(CheckInventory("JewelSlot2")==gem){power++;}
if(CheckInventory("JewelSlot3")==gem){power++;}
if(CheckInventory("JewelSlot4")==gem){power++;}

SetResultValue(power);
}


Script "cbm_plugfloorcheck" (void)
{
	if(CheckActorFloorTexture(0, "F_SKY1")){
		bool checkDistance = false;
		if(GetActorVelZ(0) < 0){checkDistance = true;}
		if((GetActorZ(0) - GetActorFloorZ(0)) < 10.0 && checkDistance){SetActorState(0, "Death");}
	}
}

Script "cbm_PlugLatch" (void)
{
	int TargetTID = ACS_ExecuteWithResult(147,1);//Tracer
	SetActivatorToTarget(0);

	if(TargetTID==0){terminate;}

	SetPointer(AAPTR_TRACER, TargetTID);

	int OwnerTID = ActivatorTID();

	if(IsTeamGame){
		if(GetPlayerInfo(TargetTID-1000, PLAYERINFO_TEAM) == GetPlayerInfo(OwnerTID-1000, PLAYERINFO_TEAM)){
		GiveInventory("PlugmanLatch",2);
		}
	}
	GiveInventory("PlugmanLatch",1);

	while(GetActorProperty(TargetTID, APROP_HEALTH)>0 && GetActorProperty(OwnerTID, APROP_HEALTH)>0 && xyzDistance(OwnerTID, TargetTID) < 700 && CheckInventory("PlugmanLatch")>0){
		ACS_NamedExecuteAlways("cbm_DrawPlugCable", 0, TargetTID, OwnerTID, CheckInventory("PlugmanIsShocking"));
		Delay(1);
	}

	SetPointer(AAPTR_TRACER,0);
	TakeInventory("PlugmanLatch",999);
}

script "cbm_PlugHealthDrain" (void)
{
	int player = ActivatorTID();

	SetActivator(0, AAPTR_Tracer);

	if(ClassifyActor(ActivatorTID()) & ACTOR_PLAYER){
		if(GetActorProperty(0, APROP_HEALTH)>1){
			SetActorProperty(0, APROP_HEALTH, GetActorProperty(0, APROP_HEALTH) - 1);
		}
		if(GetActorProperty(0, APROP_HEALTH)==1){
			SpawnProjectile(player, "PluggedEnemyFinalHit", 0, 1, 0, 0, 6300 + ActivatorTID());//PlugmanFinshingPlugHit
			SetActorPosition(6300 + ActivatorTID(), GetActorX(0), GetActorY(0), GetActorZ(0) + 1835008, 0);
		}
	}
}

Script "cbm_DrawPlugCable" (int grappleTid, int playerTid, int ang) CLIENTSIDE
{
    int plX; int plY;  int plZ;
    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
	int density = 18;
	
	int zOff;
	
	int angle = GetActorAngle(playerTid);
	str SpawnName;
	
	if(grappleTid!=0){
		zOff = 32.0;
		SpawnName = StrParam(s:"PlugCableFX",i:ACS_ExecuteWithResult(143,0));
	}
	else{
		SpawnName = StrParam(s:"PlugCableFX",i:ACS_ExecuteWithResult(143,playerTid,1));
	}

    plX = GetActorX(playerTid) + cos(angle + 0.75) * 17; grX = GetActorX(grappleTid);
    plY = GetActorY(playerTid) + sin(angle + 0.75) * 17; grY  = GetActorY(grappleTid);
    plZ = GetActorZ(playerTid)+ 28.0; grZ  = GetActorZ(grappleTid) + zOff;

    vX = grX - plX;   vY = grY - plY;   vZ = grZ - plZ;

    magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);

    pointCount  = magnitude / density;
    pointOffset = magnitude - (pointCount * density);

    if (magnitude != 0)
    {
        nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

        int i; int j;
        for (i = 0; i < pointCount; i++)
        {
            j = (i * density) + pointOffset;

            bX = (nX * j) + plX;
            bY = (nY * j) + plY;
            bZ = (nZ * j) + plZ;//+(16 << 16);

            Spawn(SpawnName, bX, bY, bZ, 0, ang);
        }
    }
}


//  __    ___
// /_ |  / _ \
//  | | | | | |
//  | | | | | |
//  | | | |_| |
//  |_|  \___/

script "cbm_bladedropcheck" (void)
{
	if((GetPlayerInput(-1, INPUT_BUTTONS) & BT_JUMP) && GetActorPitch(0) > 0.08){
	//Printbold(s:"drop");
	SetResultValue(1);
	}
	else
	{
	SetResultValue(0);
	}
}

script "cbm_ChillSlipNSlide" (int TheAngle, int TheThrust, int maxRange)
{

	int userTID = ACS_ExecuteWithResult(257,0);
	int userTeam = ACS_ExecuteWithResult(143,0);

	for(int p = 0;p < ServerMAX; p++)
	{
		if(!PlayerInGame(p) || p+1000 == userTID)
		{
			continue;
		}
		if(IsTeamGame)
		{
			if(userTeam == GetPlayerInfo(p, PLAYERINFO_TEAM))
			{
				if(!CheckActorInventory(p+1000,"ChillPuddleDelayACS_A"))
				{
					if(xyDistance(0, p+1000) < maxRange*2 && abs(zDistance(0, p+1000)) <= 31)
					{
						GiveActorInventory(p+1000,"ChillPuddleDelayACS_A",1);
						GiveActorInventory(p+1000,"ChillPuddleAllySpeed",1);
					}
				}
				continue;
			}
		}
		if(!CheckActorInventory(p+1000,"ChillPuddleDelayACS_E"))
		{
			if(xyDistance(0, p+1000) < maxRange && abs(zDistance(0, p+1000)) <= 31)
			{
			//	if(p+1000 == userTID){
					//GiveActorInventory(p+1000,"SelfSpeedPickupThatIsFake",1);
			//	}
				GiveActorInventory(p+1000,"ChillPuddleDelayACS_E",1);
				SetActorVelocity(p+1000,FixedMul(cos(TheAngle),TheThrust << 16),FixedMul(sin(TheAngle),TheThrust << 16),GetActorVelZ(p+1000),0,0);
			}
		}
	}


}

#DEFINE DEF_ChillMaxHP 65

script "C_CHILLSHIELD" (int jump)//a most modular script for chill's shield
{
	int ChillHP = max(PlayerHealth(),0);
	int ChillFlag = CheckInventory("ChillHealthFlag");

	switch (jump) {
		case 3://shield up
			if(CheckInventory("ChillShield")<1){
				TakeInventory("ChillHealthFlag",999);
				GiveInventory("ChillHealthFlag",ChillHP);
				if(ChillHP < DEF_ChillMaxHP){
					SetActorProperty(0,APROP_HEALTH,1);
					HealThing(30,30);
				}
			}
			GiveInventory("ChillShield",25);
			break;
		case 2://shield break
			SetActorProperty(0,APROP_HEALTH,1);
			if(ChillFlag >= 2){
				HealThing(200,ChillFlag);
			}
			break;
		case 1://update health memory
			if(ChillFlag >= DEF_ChillMaxHP){
				break;
			}
			GiveInventory("ChillHealthFlag",ChillHP-30);
			if(CheckInventory("ChillHealthFlag") >= DEF_ChillMaxHP){
				HealThing(200,DEF_ChillMaxHP);
			}
			else{
				SetActorProperty(0,APROP_HEALTH,1);
				HealThing(250,30);
			}
			break;
		case 0://armor loss on hit
			if(CheckInventory("ChillShield")>0){
				int Num_0 = 30;
				if(ChillFlag >= DEF_ChillMaxHP){Num_0 = DEF_ChillMaxHP;}
				TakeInventory("ChillShield",(Num_0 - ChillHP));
				HealThing(200,Num_0);
				TakeInventory("ChillShieldCooldown",245);
			}
			else{
				TakeInventory("ChillShieldCooldown",245);
			}
			break;
		}
}

//  __    __
// /_ |  /_ |
//  | |   | |
//  | |   | |
//  | |   | |
//  |_|   |_|

// ______
// | ___ \
// | |_/ /
// | ___ \
// | |_/ /
// \____/


script "cbm_StickyColdWall" (int radius, int height, int WallZ)
{
	//Log(s:"radius = ",i:radius,s:"  height = ",i:height,s:"  WallZ = ",i:WallZ);
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int team = ACS_ExecuteWithResult(143,0);
	int i;

	int playerX,playerY,playerZ;

	int oldx = x;
	int oldy = y;
	int oldz = z;
	int velx = GetActorVelX(0);
	int vely = GetActorVelY(0);
	int velz = GetActorVelZ(0);
	int PlayerVelX,PlayerVelY,PlayerVelZ;
	int PlayerSpeed;
	int ObjectSpeed;
	int SpeedDif;
	GiveInventory("CutterFlag",1);

	if(team==-1){
		i = ACS_ExecuteWithResult(257);
		while(CheckInventory("CutterFlag")){
			If(PlayerInGame(i-1000)){
				playerX = GetActorX(i);
				playerY = GetActorY(i);
				playerZ = GetActorZ(i);
				PlayerVelX = GetActorVelX(i);
				PlayerVelY = GetActorVelY(i);
				PlayerVelZ = GetActorVelZ(i);
				if(onStickyColdWallZ(z,playerZ,WallZ,height)){
					if(onPlatformXY(x,y,playerX,playerY,radius)){
						if(GetPlayerInput(i-1000, INPUT_BUTTONS) & (BT_JUMP)){
							ThrustThingZ(i,(GetActorProperty(i,APROP_JumpZ) >> 16) * 4,0,0);
						}
						else{
							PlayerSpeed = SpeedCheck(playerX, playerX - PlayerVelX, playerY, playerY - PlayerVelY);
							ObjectSpeed = SpeedCheck(x, oldx, y, oldy);
							If(ObjectSpeed > 0)
								{SpeedDif = 1.0 - FixedDiv(PlayerSpeed, ObjectSpeed);}
							Else
								{SpeedDif = 0;}
							If(SpeedDif > 0.20 && SpeedDif < 1.0)
								{SetActorVelocity(i,velx + FixedMul(velx, SpeedDif), vely + FixedMul(vely, SpeedDif), velz, 0, 0);}
							Else
								{SetActorVelocity(i,velx, vely, velz, 0, 0);}
						}
					}
				}
			}
			oldx = x;
			oldy = y;
			oldz = z;
			delay(1);
			x = GetActorX(0);
			y = GetActorY(0);
			z = GetActorZ(0);
			velx = x-oldx;
			vely = y-oldy;
			velz = z-oldz;
		}
	}
	else{
		while(CheckInventory("CutterFlag")){
			for(i=1000; i<ServerMAX+1000; i++){
				If(PlayerInGame(i-1000)&&ACS_ExecuteWithResult(143,i,1)==team){
					playerX = GetActorX(i);
					playerY = GetActorY(i);
					playerZ = GetActorZ(i);
					PlayerVelX = GetActorVelX(i);
					PlayerVelY = GetActorVelY(i);
					PlayerVelZ = GetActorVelZ(i);
					if(onStickyColdWallZ(z,playerZ,WallZ,height)){
						if (onPlatformXY(x,y,playerX,playerY,radius)){
							if (GetPlayerInput(i-1000, INPUT_BUTTONS) & (BT_JUMP)){
								ThrustThingZ(i,(GetActorProperty(i,APROP_JumpZ) >> 16) * 4,0,0);
							}
							else{
								PlayerSpeed = SpeedCheck(playerX, playerX - PlayerVelX, playerY, playerY - PlayerVelY);
								ObjectSpeed = SpeedCheck(x, oldx, y, oldy);
								If(ObjectSpeed > 0)
									{SpeedDif = 1.0 - FixedDiv(PlayerSpeed, ObjectSpeed);}
								Else
									{SpeedDif = 0;}
								If(SpeedDif > 0.20 && SpeedDif < 1.0)
									{SetActorVelocity(i,velx + FixedMul(velx, SpeedDif), vely + FixedMul(vely, SpeedDif), velz, 0, 0);}
								Else
									{SetActorVelocity(i,velx, vely, velz, 0, 0);}
							}
						}
					}
				}
			}
			oldx = x;
			oldy = y;
			oldz = z;
			delay(1);
			x = GetActorX(0);
			y = GetActorY(0);
			z = GetActorZ(0);
			velx = x-oldx;
			vely = y-oldy;
			velz = z-oldz;
		}
	}
}

function int onStickyColdWallZ (int tid1z, int tid2z, int WallZ, int height)
{
	int Final = tid1z+(WallZ<<16)-tid2z;
	//Log(s:"Sticky Z DIFF = ",f:Final);
	if (Final < 0){
		//Log(s:"Sticky ---------Z");
        return Final >= -height<<16;
	}
	//Log(s:"Sticky +++++++++Z");
    return Final <= height<<16;
}


//  _   __
// | | / /
// | |/ /
// |    \
// | |\  \
// \_| \_/

//  _    _   _____ 
// | |  | | |_   _|
// | |  | |   | |
// | |/\| |   | |
// \  /\  /   | |
//  \/  \/    \_/

// __       __
// \ \     / /
//  \ \   / /
//   \ \ / /
//    \ V /
//     \_/

script "cbm_MarsRocketJump" (int thrust, int radius, int zOffset)
{
	int target = ACS_ExecuteWithResult(147);

	//Log(i:xyzDistance(0, target));
	if(xyzDistance(0, target) <= radius+16){
		SetResultValue(0);
		actorPull(0, target, -thrust, 0, 0, zOffset<<16);
	}
}


script "cbm_uranusgrab" (void)
{
	int grabTID = ACS_ExecuteWithResult(147,1);
	//Log(i:grabTID);
	if(grabTID == 0){
		TakeInventory("UranusCarrying",1);
		SetPointer(AAPTR_TRACER, 0);
		terminate;
	}
	if(CheckInventory("UranusCarrying")){
		if(!customgrab(grabTID,10,0,100000/4,0)){
			TakeInventory("UranusCarrying",1);
			SetPointer(AAPTR_TRACER, 0);
		}
	}
}



// ______
// |  ___|
// | |_ _   _ _ __   ___
// |  _| | | | '_ \ / __|
// | | | |_| | | | | (__
// \_|  \__,_|_| |_|\___|
                    

function void hudmessageonactor(int tid, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, str colour, int swap)
{
	int dist, angle, vang, pitch, x, y;

	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }

	if(sprite != -1)
	{
		SetFont(sprite);
		text = "A";
		//offset = 0.1;
	}

	SetHudSize(hudX, hudY, 1);
	x = GetActorX(tid) - GetActorX(0);
	y = GetActorY(tid) - GetActorY(0);

	vang = VectorAngle(x,y);
	angle = (vang - GetActorAngle(0) + 1.0) % 1.0;

	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
	else dist = FixedDiv(x, cos(vang));

	if ((angle < 0.2 || angle > 0.8) && (dist >> 16) < range)
	{
		if (GetActorPitch(0) >= -0.25 && GetActorPitch(0) <= 0.25)
		{
			pitch = VectorAngle(dist, GetActorZ(tid) - (GetActorZ(0) + 41.0));
			pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;
			if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0) //    Fixes divide by zero
			{
				x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
				y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

				x+=xOffset;
				y+=yOffset;
				if(swap){HudMessage(i:dist >> 16; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);}
				else{HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);}
			}
		}
	}
}

