#library "docammo"
#include "zcommon.acs"

#import "WEPACS.acs"//Needs the entire weapon_ammo array


script "cbm_CopyWepAmmoSet" (int number, int which) //Ammo Changer
{
	int i;
	switch (which){
	case 0:
		for (i=0; i<MAX_WEAPONS_GLOBAL; i++) {
			//SetAmmoCapacity(weapons_ammo[i][1],AmmoMax_Modifier[i][0]+number);//Old method
			if(weapons_ammo[i][3]==1.0){SetAmmoCapacity(weapons_ammo[i][1],GetAmmoCapacity(weapons_ammo[i][1])+number);}
		}//>0.25
		break;
	case 1:
		for (i=0; i<MAX_WEAPONS_GLOBAL; i++) {
			if(weapons_ammo[i][3]==1.0){SetAmmoCapacity(weapons_ammo[i][1],GetAmmoCapacity(weapons_ammo[i][1])-number);}
		}
		break;
	case 2:
		for (i=0; i<MAX_WEAPONS_GLOBAL; i++) {
			if(weapons_ammo[i][3]==1.0){SetAmmoCapacity(weapons_ammo[i][1],GetAmmoCapacity(weapons_ammo[i][1])*number);}
		}
		break;
	case 3:
		for (i=0; i<MAX_WEAPONS_GLOBAL; i++) {
			if(weapons_ammo[i][3]==1.0){SetAmmoCapacity(weapons_ammo[i][1],GetAmmoCapacity(weapons_ammo[i][1])/number);}
		}
		break;
	//case 4:
		//for (i=0; i<MAX_WEAPONS_GLOBAL; i++) {
			//SetAmmoCapacity(weapons_ammo[i][1],round(GetAmmoCapacity(weapons_ammo[i][1])*1.14));
		//}
		//break;
}
}

//function int round(int fixedNumber)
//{return (fixedNumber + 0.5) >> 16;}

script "cbm_CopyWepAmmoRatioGive" (int amount) //Doc Robot ammo regen
{
	int percentage = FixedDiv(amount << 16, 100.0);
	int AmmoMultiplier = 1.0;
	int AmmoPer = 1.0;

	For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++) {
		If(CheckInventory(weapons_ammo[i][0]) == 1) {
			if ( (StrCmp(weapons_ammo[i][0],"PlantBarrierWepC") != 0 || StrCmp(weapons_ammo[i][0],"GrabBusterWepC") != 0 || ACS_ExecuteWithResult(975,0)!=2) && weapons_ammo[i][3] != 0.0) {
				if(weapons_ammo[i][3] == 1.0){
					AmmoPer = FixedMul((GetAmmoCapacity(weapons_ammo[i][1]) * percentage) >> 16, AmmoMultiplier);
				}
				else{
					AmmoPer = FixedMul((GetAmmoCapacity(weapons_ammo[i][1]) * FixedMul(percentage,weapons_ammo[i][3])) >> 16, AmmoMultiplier);
				}
				if(AmmoPer < 1){AmmoPer = 1;}
				GiveInventory(weapons_ammo[i][1], AmmoPer);
			}
		}
	}
}

script "cbm_CopyWepAmmoBasicGive" (int amount)
{
	//if(negative){amount *= -1;};
	For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++) {
		If(CheckInventory(weapons_ammo[i][0]) == 1) {
			if (weapons_ammo[i][3] != 0.0) {
				//TakeInventory(weapons_ammo[i][1], amount);
				GiveInventory(weapons_ammo[i][1], amount);
			}
		}
	}
}



int weapons_ammo_CBM[MAX_WEAPONS_GLOBAL][4] =
{
//EvilRobotStyle,Health,Jump,Speed
{0,100,100,100},//TrebleBoostC
{0,100,100,100},//Treblebooster

{5,185,100,70},//SuperArm
{2,135,130,80},//HyperBomb
{7,100,100,100},//IceSlasher
{4,75,100,115},//ThunderBeam
{1,85,100,100},//FireStorm
{3,85,125,125},//RollingCutter
{8,100,100,100},//TimeSlow
{6,90,100,100},//OilSlider

{7,100,100,100},//BubbleLead
{3,65,110,100},//MetalBlade
{1,100,100,90},//AtomicFire
{5,125,100,85},//LeafShield
{4,100,100,110},//AirShooter
{6,75,110,150},//QuickBoomerang
{2,100,130,110},//CrashBomb
{8,100,100,100},//TimeStopper

{7,100,120,100},//MagnetMissile
{1,85,100,140},//TopSpin
{6,155,100,95},//NeedleCannon
{3,65,150,100},//ShadowBlade
{8,100,100,100},//GeminiLaser
{5,85,100,125},//SearchSnake
{2,200,100,65},//HardKnuckle
{4,100,100,100},//SparkShock

{2,85,100,85},//DrillBomb
{3,85,130,100},//RingBoomerang
{6,125,100,90},//DustCrusher
{1,100,100,100},//PharaohShot
{5,85,120,100},//SkullBarrier
{4,100,100,100},//DiveMissile
{7,155,150,100},//RainFlush
{8,85,120,105},//FlashStopper

{2,100,100,110},//NapalmBomb
{1,125,100,100},//ChargeKick
{3,85,100,110},//GyroAttack
{5,155,100,100},//PowerStone
{6,100,100,100},//WaterWave
{8,125,130,90},//CrystalEye
{4,115,130,95},//StarCrash
{7,100,150,100},//GravityHold

{7,100,100,110},//BlizzardAttack
{1,100,120,100},//FlameBlast
{6,125,130,85},//YamatoSpear
{5,85,100,100},//PlantBarrier
{3,100,100,110},//SilverTomahawk
{4,125,100,90},//WindStorm
{2,115,120,80},//KnightCrush
{8,85,100,125},//CentaurFlash

{7,100,100,100},//FreezeCracker
{8,100,100,100},//NoiseCrush
{5,100,200,95},//WildCoil
{2,100,100,100},//DangerWrap
{1,100,100,100},//ScorchWheel
{6,125,140,75},//JunkShield
{3,85,100,105},//SlashClaw
{4,125,130,75},//ThunderBolt

{8,85,130,95},//AstroCrush
{1,125,100,95},//FlameSword
{4,85,120,115},//ThunderClaw
{5,85,100,90},//HomingSniper
{6,100,100,100},//WaterBalloon
{4,90,110,105},//MegaBall
{2,100,100,95},//FlashBomb
{7,200,100,65},//IceWave
{3,100,100,95},//TornadoHold

{3,100,100,95},//TenguBlade
{1,65,100,100},//WaveBurner
{5,115,100,80},//SpreadDrill
{6,90,100,100},//MagicCard
{2,125,100,80},//RemoteMine
{8,85,130,95},//CopyVision
{7,135,100,80},//IceWall
{4,85,100,105},//LightningBolt

{4,100,100,95},//PlugBall
{2,90,100,100},//LaserTrident
{8,85,100,100},//BlackHoleBomb
{7,100,100,95},//JewelSatellite
{5,155,100,75},//ConcreteShot
{3,85,120,95},//TornadoBlow
{6,90,130,100},//HornetChaser
{1,125,140,90},//MagmaBazooka

{3,85,130,100},//TripleBlade
{6,100,130,100},//WaterShield
{2,155,100,75},//CommandoBomb
{7,90,120,85},//ChillSpike
//{4,100,110,105},//ThunderWool
//{8,100,110,105},//ReboundStriker
{5,85,100,100},//WheelCutter
{1,155,130,120},//SolarBlaze

//{4,100,110,105},//SparkChaser
{3,85,100,110},//GrabBuster
{7,100,100,100},//BubbleBomb
{2,135,100,75},//PhotonMissile
{4,90,100,100},//ElectricShock
//{8,100,110,105},//BlackHole
{5,185,100,65},//DeepDigger
{1,75,110,100},//BreakDash
{6,125,100,90},//SaltWater

{5,100,100,100},//Sakugarne
{2,85,130,115},//BalladeCracker
{3,100,100,95},//ScrewCrusher
{8,125,100,120},//MirrorBuster

{5,90,110,105},//RollSweep
{1,90,120,105},//RisingFist
{3,85,100,100},//WaveBuster
{2,100,100,100},//FragBomber
{8,100,100,100},//TimeBender
{8,100,130,100},//BoobeamBarrier
{6,85,100,140},//TopTwist
{4,100,100,100},//DocScanner
{2,85,120,105},//FlashBulb
{4,100,110,105},//DiveSonar
{7,85,120,100},//SkullSniper
{5,100,150,100},//GravitySphere
{4,115,100,105},//DarkShield
{3,85,100,125},//CentaurArrow
{3,85,100,100},//PlantTrapper
{4,85,100,105},//DynamoTendril
{6,85,100,100},//RainbowGalaxy
{3,100,100,110},//FakeRepeater

{1,85,130,125},//BusterRodG
{7,100,100,100},//MegaWaterS
{1,200,100,65},//HyperStormH
};

/*
script "cbm_GigaWeaponCheck" (void) {
	setResultValue(FindEvilWepTypeFunc());
}
*/

script "cbm_GigaWeaponCheck" (void) {
	AdjustInventoryFunc("GigaType",weapons_ammo_CBM[cbm_CheckForWeaponFunc()][0]);
}

function void AdjustInventoryFunc (str item, int count) {
	int current = CheckInventory(item);
	if(count>current) {
		GiveInventory(item, count-current);
	} else if(current>count) {
		TakeInventory(item, current-count);
	}
}

#DEFINE I_TOTAL_CLASSES 120
str Doc_Scan_List[I_TOTAL_CLASSES][4] =
{
{"CopyWep","Null2",-1.0,"Megaman"},
{"CopyWep","Null2",-1.0,"Protoman"},
{"CopyWep","Null2",-1.0,"Bass"},
{"CopyWep","Null2",-1.0,"Duo"},
{"CopyWep","Null2",-1.0,"Maestro"},
{"MegaBallWepC","Null2",-1.0,"Rock"},
{"RollSweepWepC","Null2",-1.0,"Roll"},
{"Null","Null2",-1.0,"Auto"},
{"RisingFistWepC","Null2",-1.0,"Dr. Light"},
{"WaveBusterWepC","Null2",-1.0,"Dr. Wily"},
{"FragBomberWepC","Null2",-1.0,"Sniper Joe"},

{"RollingCutterWepC","Null2",-1.0,"Cutman"},
{"SuperArmWepC","Null2",-1.0,"Gutsman"},
{"IceSlasherWepC","Null2",-1.0,"Iceman"},
{"HyperBombWepC","Null2",-1.0,"Bombman"},
{"FireStormWepC","Null2",-1.0,"Fireman"},
{"ThunderBeamWepC","Null2",-1.0,"Elecman"},
{"TimeSlowWepC","Null2",-1.0,"Timeman"},
{"OilSliderWepC","Null2",-1.0,"Oilman"},

{"MetalBladeWepC","Null2",-1.0,"Metalman"},
{"AirShooterWepC","Null2",-1.0,"Airman"},
{"BubbleLeadWepC","Null2",-1.0,"Bubbleman"},
{"QuickBoomerangWepC","Null2",-1.0,"Quickman"},
{"CrashBombWepC","Null2",-1.0,"Crashman"},
{"TimeBenderWepC","TimeStopperWepC",1.0,"Flashman"},
{"AtomicFireWepC","Null2",-1.0,"Heatman"},
{"LeafShieldWepC","Null2",-1.0,"Woodman"},
{"BoobeamBarrierWepC","Null2",-1.0,"Alien"},

{"NeedleCannonWepC","Null2",-1.0,"Needleman"},
{"MagnetMissileWepC","Null2",-1.0,"Magnetman"},
{"GeminiLaserWepC","Null2",-1.0,"Geminiman"},
{"HardKnuckleWepC","Null2",-1.0,"Hardman"},
{"TopTwistWepC","TopSpinWepC",10.0,"Topman"},
{"SearchSnakeWepC","Null2",-1.0,"Snakeman"},
{"SparkShockWepC","Null2",-1.0,"Sparkman"},
{"ShadowBladeWepC","Null2",-1.0,"Shadowman"},
{"DocScannerWepC","Null2",-1.0,"DocRobot"},

{"FlashBulbWepC","FlashStopperWepC",10.0,"Brightman"},
{"RainFlushWepC","Null2",-1.0,"Toadman"},
{"DrillBombWepC","Null2",-1.0,"Drillman"},
{"PharaohShotWepC","Null2",-1.0,"Pharaohman"},
{"RingBoomerangWepC","Null2",-1.0,"Ringman"},
{"DustCrusherWepC","Null2",-1.0,"Dustman"},
{"DiveSonarWepC","DiveMissileWepC",10.0,"Diveman"},
{"SkullBarrierWepC","SkullSniperWepC",50.0,"Skullman"},

{"GravitySphereWepC","GravityHoldWepC",10.0,"Gravityman"},
{"WaterWaveWepC","Null2",-1.0,"Waveman"},
{"PowerStoneWepC","Null2",-1.0,"Stoneman"},
{"GyroAttackWepC","Null2",-1.0,"Gyroman"},
{"StarCrashWepC","Null2",-1.0,"Starman"},
{"ChargeKickWepC","Null2",-1.0,"Chargeman"},
{"NapalmBombWepC","Null2",-1.0,"Napalmman"},
{"CrystalEyeWepC","Null2",-1.0,"Crystalman"},
{"DarkShieldWepC","Null2",-1.0,"Darkman1"},
{"DarkShieldWepC","Null2",-1.0,"Darkman2"},
{"DarkShieldWepC","Null2",-1.0,"Darkman3"},
{"DarkShieldWepC","Null2",-1.0,"Darkman4"},

{"BlizzardAttackWepC","Null2",-1.0,"Blizzardman"},
{"CentaurFlashWepC","CentaurArrowWepC",50.0,"Centaurman"},
{"FlameBlastWepC","Null2",-1.0,"Flameman"},
{"KnightCrushWepC","Null2",-1.0,"Knightman"},
{"PlantTrapperWepC","PlantBarrierWepC",5.0,"Plantman"},
{"SilverTomahawkWepC","Null2",-1.0,"Tomahawkman"},
{"WindStormWepC","Null2",-1.0,"Windman"},
{"YamatoSpearWepC","Null2",-1.0,"Yamatoman"},

{"FreezeCrackerWepC","Null2",-1.0,"Freezeman"},
{"JunkShieldWepC","Null2",-1.0,"Junkman"},
{"DangerWrapWepC","Null2",-1.0,"Burstman"},
{"ThunderBoltWepC","Null2",-1.0,"Cloudman"},
{"WildCoilWepC","Null2",-1.0,"Springman"},
{"SlashClawWepC","Null2",-1.0,"Slashman"},
{"NoiseCrushWepC","Null2",-1.0,"Shademan"},
{"ScorchWheelWepC","Null2",-1.0,"Turboman"},

{"TenguBladeWepC","TornadoHoldWepC",50.0,"Tenguman"},
{"CopyVisionWepC","AstroCrushWepC",5.0,"Astroman"},
{"FlameSwordWepC","Null2",-1.0,"Swordman"},
{"ThunderClawWepC","Null2",-1.0,"Clownman"},
{"HomingSniperWepC","Null2",-1.0,"Searchman"},
{"IceWaveWepC","Null2",-1.0,"Frostman"},
{"FlashBombWepC","Null2",-1.0,"Grenademan"},
{"WaterBalloonWepC","Null2",-1.0,"Aquaman"},
{"Null","Null2",-1.0,"OriginalDuo"},
{"CopyWep","Null2",-1.0,"Evil Robot"},

{"DynamoTendrilWepC","LightningBoltWepC",5.0,"Dynamoman"},
{"IceWallWepC","Null2",-1.0,"Coldman"},
{"SpreadDrillWepC","Null2",-1.0,"Groundman"},
{"RemoteMineWepC","Null2",-1.0,"Pirateman"},
{"WaveBurnerWepC","Null2",-1.0,"Burnerman"},
{"MagicCardWepC","Null2",-1.0,"Magicman"},
{"Null","Null2",-1.0,"King"},

{"ConcreteShotWepC","Null2",-1.0,"Concreteman"},
{"TornadoBlowWepC","Null2",-1.0,"Tornadoman"},
{"LaserTridentWepC","Null2",-1.0,"Splashwoman"},
{"PlugBallWepC","Null2",-1.0,"Plugman"},
{"JewelSatelliteWepC","Null2",-1.0,"Jewelman"},
{"HornetChaserWepC","Null2",-1.0,"Hornetman"},
{"MagmaBazookaWepC","Null2",-1.0,"Magmaman"},
{"RainbowGalaxyWepC","BlackHoleBombWepC",5.0,"Galaxyman"},
{"FakeRepeaterWepC","Null2",-1.0,"Fakeman"},

{"TripleBladeWepC","Null2",-1.0,"Blademan"},
{"WaterShieldWepC","Null2",-1.0,"Pumpman"},
{"CommandoBombWepC","Null2",-1.0,"Commandoman"},
{"ChillSpikeWepC","Null2",-1.0,"Chillman"},
//{"ThunderWoolWepC","Null2",-1.0,"Sheepman"},
//{"ReboundStrikerWepC","Null2",-1.0,"Strikeman"},
{"WheelCutterWepC","Null2",-1.0,"Nitroman"},
//{"SolarBlazeWepC","Null2",-1.0,"Solarman"},

//{"SparkChaserWepC","Null2",-1.0,"Terra"},
{"GrabBusterWepC","Null2",-1.0,"Mercury"},
{"BubbleBombWepC","Null2",-1.0,"Venus"},
{"PhotonMissileWepC","Null2",-1.0,"Mars"},
{"ElectricShockWepC","Null2",-1.0,"Jupiter"},
//{"BlackHoleWepC","Null2",-1.0,"Saturn"},
{"DeepDiggerWepC","Null2",-1.0,"Uranus"},
{"BreakDashWepC","Null2",-1.0,"Pluto"},
{"SaltWaterWepC","Null2",-1.0,"Neptune"},
//{"Null","Null2",-1.0,"Sunstar"},

{"BusterRodGWepC","Null2",-1.0,"Buster Rod G"},
{"MegaWaterSWepC","Null2",-1.0,"Mega Water S"},
{"HyperStormHWepC","Null2",-1.0,"Hyper Storm H"},

{"MirrorBusterWepC","Null2",-1.0,"Enker"},
{"ScrewCrusherWepC","Null2",-1.0,"Punk"},
{"BalladeCrackerWepC","Null2",-1.0,"Ballade"},
{"SakugarneWepC","Null2",-1.0,"Quint"},
{"Null","Null2",-1.0,"RaThor"},
{"Null","Null2",-1.0,"BBA Mega Man"}
};

int Doc_Memory_Array[64][4]={
//Scanner(Gone so null),LastWep,Jump,Speed
{-1,-1,-1,-1}
};

script "cbm_DocStatsModifier" (int Force)
{
	int TheWepNum = cbm_CheckForWeaponFunc();
	int TID = ActivatorTID();
	if(TheWepNum == -1){
		TheWepNum = 0;
	}
	if(Doc_Memory_Array[TID-1000][1] == TheWepNum && !Force){
		terminate;
	}
	DocStatsModifierFunc(TheWepNum,TID,Force);
}

function void DocStatsModifierFunc (int TheWepNum, int TID, bool Force)
{
	Doc_Memory_Array[TID-1000][1] = TheWepNum;

	DocHealthShiftFunc(weapons_ammo_CBM[TheWepNum][1]);
	int DocJump = weapons_ammo_CBM[TheWepNum][2];
	int DocSpeed = weapons_ammo_CBM[TheWepNum][3];

	if(Doc_Memory_Array[TID-1000][2] != DocJump || Force){
		Doc_Memory_Array[TID-1000][2] = DocJump;
		SetActorProperty(TID,APROP_JumpZ,(1.0*DocJump)/10);
		AdjustInventoryFunc("DocRobotJump_F",DocJump);
	}
	if(Doc_Memory_Array[TID-1000][3] != DocSpeed || Force){
		Doc_Memory_Array[TID-1000][3] = DocSpeed;
		SetActorProperty(TID,APROP_SPEED,(1.0*DocSpeed)/100);
		AdjustInventoryFunc("DocRobotSpeed_F",DocSpeed);
	}
}

function void SetGigaWeaponFunc1 (str item, int count) {
	int current = CheckInventory(item);
	if(count>current) {
		GiveInventory(item, count-current);
	} else if(current>count) {
		TakeInventory(item, current-count);
	}
}

function void DocHealthShiftFunc (int WhatHP)
{
	int MaxHP = GetActorProperty(0, APROP_SPAWNHEALTH);
	if(WhatHP == MaxHP){
		//Log(s:"Same Health!!");
	}
	else{
		int CurrHP = PlayerHealth();
		int Percent = ((1.0)*WhatHP)/MaxHP;
		//Log(s:"HP = ",i:CurrHP,s:" -- Max HP = ",i:MaxHP,s:" -- WhatHP = ",i:WhatHP);
		CurrHP = docround(CurrHP * Percent);
		//Log(s:"CurrHP = ",i:CurrHP);
		if(CurrHP > WhatHP){
			CurrHP = WhatHP;
		}
		SetActorProperty(0, APROP_SPAWNHEALTH, WhatHP);
		SetActorProperty(0, APROP_HEALTH, CurrHP);
	}
}
function int docround(int fixedNumber) //this function caused issues unless renamed for me - Trill
{
	return (fixedNumber + 0.5) >> 16;
}

script "cbm_DocScannerFetch" (int TID, int OwnerTID, int GetInfo)
{
//Check for 'BearerFlag' for YD

	int WepInteger = -1;
	str WepString = "DocCarry";

	if(GetInfo >= 1){
		//WepInteger = Doc_Memory_Array[TID-1000][0];
		WepInteger = GetUserVariable(0,"user_ScannerMemory");

		SetActivator(OwnerTID);
		SetHudSize(600,380,0);
		if(WepInteger >= -1 && WepInteger <= 1){
			//SORRY NOTHING
			HudMessage(s:"ERROR! CANNOT COPY ", n:TID-999, s:"!";HUDMSG_FADEOUT|HUDMSG_COLORSTRING,38000+OwnerTID,"MenuWhite",300.4,50.0,2.0,0.5);
			
			if(GetInfo != 28){
				GiveActorInventory(OwnerTID,"DocCarry",1);
				TakeActorInventory(OwnerTID,"DocVirusAmmo",GetInfo/4);
			}
			GiveActorInventory(OwnerTID,"DocScannerGetNoSnd_P",1);
		}
		else{//WEAPON COPIED
			HudMessage(s:"YOU COPIED ", n:TID-999,s:"\nYOU GOT ", s:weapons_ammo[WepInteger][2];HUDMSG_FADEOUT|HUDMSG_COLORSTRING,38000+OwnerTID,"MenuWhite",300.4,50.0,2.0,0.5);
			if(GetInfo == 28){
				TakeActorInventory(OwnerTID,"DocScannerAmmo",GetInfo);
			}
			else{
				TakeActorInventory(OwnerTID,"DocVirusAmmo",GetInfo);
			}
			GiveActorInventory(OwnerTID,weapons_ammo[WepInteger][0],1);
			GiveActorInventory(OwnerTID,"DocScannerGetSnd_P",1);
		}
		terminate;
	}

	int TheTracer = PlayerClass(TID-1000);

	//Log(s:"Owner TID = ",i:OwnerTID,s:" /// Tracer TID = ",i:TID,s:" /// The Class = ",s:Doc_Scan_List[TheTracer][3]);
	if(CheckActorInventory(TID,"BearerFlag")){
		//Log(s:"BearerFlag, skip");
	}
	else if(StrCmp(Doc_Scan_List[TheTracer][0],"CopyWep") == 0){
		WepInteger = ACS_NamedExecuteWithResult("cbm_DocCheckPointerWep",TID);
		if(WepInteger != -1){
			WepString = weapons_ammo[WepInteger][0];
		}
		else{
			//Log(s:"WepInteger is -1!!");
		}
	}
	else if(StrCmp(Doc_Scan_List[TheTracer][0],"Null") == 0){
		//WepString = "DocCarry";
	}
	else{
		if(random(1,100) <= Doc_Scan_List[TheTracer][2] >> 16){
			WepString = Doc_Scan_List[TheTracer][1];
		}
		else{
			WepString = Doc_Scan_List[TheTracer][0];
		}
		WepInteger = cbm_FindWepInWEPACS(WepString);
	}
	SetUserVariable(0,"user_ScannerMemory",WepInteger);
	//Doc_Memory_Array[TID-1000][0] = WepInteger;
}

script "cbm_DocCheckPointerWep" (int TID)
{//Checks Tracer TID's current weapon
	SetActivator(TID);
	SetResultValue(cbm_CheckForWeaponFunc());
}

Function int cbm_CheckForWeaponFunc(void)
{
	For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++)
		{
			If(CheckWeapon(weapons_ammo[i][0])){
				//Log(s:"cbm_CheckForWeaponFunc = ",i:i);
				Return i;
			}
		}
	Return -1;
}

Function int cbm_FindWepInWEPACS(str TheWep)
{
	For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++)
		{
			If(StrCmp(weapons_ammo[i][0],TheWep) == 0){
				//Log(s:"cbm_FindWepInWEPACS = ",i:i,s:" [][] Weapon = ",s:TheWep);
				Return i;
			}
		}
	Return -1;
}

